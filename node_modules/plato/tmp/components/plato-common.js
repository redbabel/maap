plato.util = (function(global, plato){
  'use strict';

  return {
    dotref : function (object, reference) {
      function arr_deref(o, ref, i) {
        return !ref ? o : (o[ref.slice(0, i ? -1 : ref.length)]);
      }
      function dot_deref(o, ref) {
        return !ref ? o : ref.split('[').reduce(arr_deref, o);
      }
      return reference.split('.').reduce(dot_deref, object);
    }
  };

}(this));
(function(global, plato){

  'use strict';

  var platoCharts = angular.module('plato-charts',[

  ]);

  platoCharts.directive('platoBarchart', ['$timeout', function($timeout){

    return {
      restrict : 'E',
      template : '',
      scope : {
        source : '=',
        property : '@'
      },
      link : function(scope, elem, attr) {
        elem.addClass('plato-barchart');

        var data = Object.keys(scope.source).map(function(key){
          var report = scope.source[key];
          return {
            label : key,
            value : plato.util.dotref(report, scope.property)
          };
        });

        // Is there post-render hook for directives? todo: handle chart abstraction better
        $timeout(function(){
          plato.barchart(data, elem[0]);
        });

      }
    };

  }]);

}(this, plato));


(function(global, plato){
  'use strict';

  var platoCommon = angular.module('plato-common',[

  ]);

  platoCommon.directive('average', ['$timeout', function($timeout){

    return {
      restrict : 'E',
      template : '<span>{{average}}</span>',
      scope : {
        source : '=',
        property : '@',
        places : '@'
      },
      link : function(scope, elem, attr) {
        elem.addClass('plato-average');

        var keys = Object.keys(scope.source);
        var sum = keys.reduce(function(prev, next){
          return prev + plato.util.dotref(scope.source[next], scope.property);
        },0);


        scope.average = (sum / keys.length).toFixed(scope.places || 0);
      }
    };

  }]);

}(this, plato));
